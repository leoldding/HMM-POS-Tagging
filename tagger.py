#%% Importsimport numpy as npimport pandas as pdimport nltknltk.download('punkt')#%% Likelihood Tablewords = []pos = []with open('dev.pos', 'r') as f:    lines = f.readlines()    for line in lines:        line = line.strip()        if line != '':            words.append(line.split("\t")[0].lower().strip())            pos.append(line.split("\t")[1].lower().strip())        uniqueWords = set(words)uniquePos = set(pos)likelihood = pd.DataFrame(index = uniqueWords, columns = uniquePos)with open('dev.pos', 'r') as f:    lines = f.readlines()    for line in lines:        line = line.strip()        if line != '':            word = line.split('\t')[0].lower().strip()            part = line.split('\t')[1].lower().strip()            if pd.isnull(likelihood.loc[word,part]):                likelihood.loc[word,part] = 1            else:                likelihood.loc[word,part] += 1for i in range(len(likelihood)):    count = np.nansum(likelihood.iloc[i])    for j in range(len(likelihood.iloc[i])):        if not pd.isnull(likelihood.iloc[i,j]):            likelihood.iloc[i,j] /= count            oov = np.full(len(likelihood.iloc[0]),1/len(likelihood.iloc[0]))likelihood.loc['oov'] = oov#%% Hidden Markov Modelsentence = ' '.join(pos)sentence = sentence.replace('\n', '')nltk_tokens = nltk.word_tokenize(sentence)  	bigrams = list(nltk.bigrams(nltk_tokens))markov = pd.DataFrame(index = uniquePos, columns = uniquePos)for current, transition in bigrams:    if pd.isnull(markov.loc[current,transition]):        markov.loc[current, transition] = 1    else:        markov.loc[current,transition] += 1for i in range(len(markov)):    count = np.nansum(markov.iloc[i])    for j in range(len(likelihood.iloc[i])):        if not pd.isnull(markov.iloc[i,j]):            markov.iloc[i,j] /= count#%%